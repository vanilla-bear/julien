<?php

/**
 * @file
 * Main file of NaviTeam Menu Attributes module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Url;
use Drupal\Core\Menu\MenuLinkInterface;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function nvt_menu_attributes_form_menu_link_content_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $attributes = \Drupal::config('nvt_menu_attributes.config')->get('attributes') ?: [];
  $menu_link = $form_state->getFormObject()->getEntity();
  $menu_link_options = $menu_link->link->first()->options ?: [];
  $menu_link_attributes = isset($menu_link_options['attributes']) ? $menu_link_options['attributes'] : [];

  $form['options']['attributes'] = [
    '#type' => 'details',
    '#title' => t('Menu Attributes'),
    '#weight' => -2,
    '#tree' => TRUE,
  ];

  $config_path = Url::fromRoute('nvt_menu_attributes.config')->toString();
  $referrer_path = parse_url(\Drupal::request()->headers->get('referer'))['path'];
  $coming_from_config = $config_path == $referrer_path;

  // Open <details> element if coming from config page.
  if ($coming_from_config) {
    $form['options']['attributes']['#open'] = TRUE;
  }

  $destination = \Drupal::destination()->getAsArray();
  $config_path = Url::fromRoute('nvt_menu_attributes.config', [], ['query' => $destination])->toString();
/*
  if (count($attributes)) {
    $form['options']['attributes']['#description'] = '<small>' . t('Manage available attributes <a href="@config">here</a>.', ['@config' => $config_path]) . '</small>';
  }
  else {
    $form['options']['attributes']['help'] = [
      '#markup' => t('Manage available attributes <a href="@config">here</a>.', ['@config' => $config_path])
    ];
  }
*/
  $autofocus = FALSE;

  // Iterate all defined attributes and create text field for them.
  foreach ($attributes as $attribute => $info) {
    // Provide default label / description for attributes.
    if (!$info['label']) {
      $info['label'] = str_replace('-', ' ', Unicode::ucfirst($attribute));
    }
    if (!$info['description']) {
      $info['description'] = t('Enter value for <code>@attribute</code> attribute.', ['@attribute' => $attribute]);
    }

    // Determine type based on options field.
    $type = !empty($info['options']) ? 'select' : 'textfield';

    $form['options']['attributes'][$attribute] = [
      '#type' => $type,
      '#title' => $info['label'],
      '#description' => $info['description'],
      '#default_value' => isset($menu_link_attributes[$attribute]) ? $menu_link_attributes[$attribute] : '',
    ];

    // Fill options if select list.
    if ($type == 'select') {
      $form['options']['attributes'][$attribute]['#empty_option'] = t('- Select -');
      $form['options']['attributes'][$attribute]['#options'] = $info['options'];
    }

    // Add "autofocus" attribute for first attribute input field
    // if coming from config page.
    if ($coming_from_config && !$autofocus) {
      $form['options']['attributes'][$attribute]['#attributes'] = ['autofocus' => 'autofocus'];
      $autofocus = TRUE;
    }
  }

  $form['actions']['submit']['#submit'][] = 'nvt_menu_attributes_menu_link_content_form_submit';
}

/**
 * Submit function for menu add / edit form.
 */
function nvt_menu_attributes_menu_link_content_form_submit($form, FormStateInterface $form_state) {
  $menu_link = $form_state->getFormObject()->getEntity();
  $options = ['attributes' => $form_state->getValue('attributes')];
  $menu_link_options = $menu_link->link->options;

  $menu_link->link->options = array_merge($menu_link_options, $options);
  $menu_link->save();
}

/**
 * Implements hook_preprocess_menu().
 */
function nvt_menu_attributes_preprocess_menu(&$variables) {
  
  $items = $variables['items'];
  foreach ($items as $key => $item) {
		// If path is current_path, set active to li.
		$menu_link_attributes = nvt_menu_attributes_get_attributes($item['original_link']);
        $current_path = \Drupal::request()->getRequestUri();
		if (count($menu_link_attributes)) {
			$url_attributes = $item['url']->getOption('attributes') ?: [];
			$attributes = array_merge($url_attributes, $menu_link_attributes);
			// Add active link.
			if(isset($attributes['item_class'])) {
				$variables['items'][$key]['attributes']->addClass($attributes['item_class']);
			}
			if(isset($attributes['link_class'])) {
				$item['url']->setOption('attributes', array('class' => $attributes['link_class']));
			}
			if(isset($attributes['style'])){
				$variables['items'][$key]['attributes']->setAttribute('style', $attributes['style']);
			}
		}
        if (count($item['below'])) { // Process if sub-menu tree exists
          _menu_process_submenu($item['below']);
        }
	}
}
function _menu_process_submenu(&$submenu) {
  foreach ($submenu as $item) {
    $menu_link_attributes = nvt_menu_attributes_get_attributes($item['original_link']);
    if (count($menu_link_attributes)) {
        $url_attributes = $item['url']->getOption('attributes') ?: [];
        $attributes = array_merge($url_attributes, $menu_link_attributes);
        if(isset($attributes['item_class'])){
            $item['attributes']->addClass($attributes['item_class']);
        }
        if(isset($attributes['link_class'])){
            $item['url']->setOption('attributes', array('class' => $attributes['link_class']));
        }
		if(isset($attributes['style'])){
			$item['attributes']->setAttribute('style', $attributes['style']);
		}
        if (count($item['below'])) { // Process if sub-menu tree exists
            _menu_process_submenu($item['below']);
        }
    }
    // if ($item['in_active_trail']) {
    //   // Add active-trail class
    //   $item['attributes']->addClass('active-trail');
    //   if ($item['url']->toString() == $current_path) {
    //     // Add active class
    //     $item['attributes']->addClass('active');
    //   } elseif (count($item['below'])) { // Process if sub-menu tree exists
    //     _menu_process_submenu($item['below'], $current_path);
    //   }
    // }
  }
}
/**
 * Get menu link attributes.
 *
 * @param \Drupal\Core\Menu\MenuLinkInterface $menu_link_content_plugin
 *
 * @return array
 */
function nvt_menu_attributes_get_attributes(MenuLinkInterface $menu_link_content_plugin) {
  $attributes = [];

  try {
    $plugin_id = $menu_link_content_plugin->getPluginId();
  }
  catch (PluginNotFoundException $e) {
    return $attributes;
  }

  if (strpos($plugin_id, ':') === FALSE) {
    return $attributes;
  }

  list($entity_type, $uuid) = explode(':', $plugin_id, 2);
  //$entity = \Drupal::entityManager()->loadEntityByUuid($entity_type, $uuid);
  try {
    $entity = \Drupal::entityManager()->loadEntityByUuid($entity_type, $uuid);
  } catch(PluginNotfoundException $e) {
    return $attributes;
  }

  if ($entity) {
    $options = $entity->link->options;
    $attributes = isset($options['attributes']) ? $options['attributes'] : [];

    // Class attribute needs special handling because Drupal
    // may add an "active" class to it.
    if (isset($attributes['class'])) {
      $attributes['class'] = explode(' ', $attributes['class']);
    }
  }

  return $attributes;
}
